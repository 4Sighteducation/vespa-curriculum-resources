/**
 * VESPA Curriculum Resources - Complete SPA v2.0
 * Part 1 of 2 - API and Core Functions
 * 
 * All 3 pages in ONE scene - Revolutionary improvement over KSENSE!
 */

console.log('[Curriculum SPA v2] Loading...');

// ===== CURRICULUM API (with proper config handling) =====
class CurriculumAPI {
    constructor(config) {
        this.config = config;
        console.log('[API] Initialized with config:', {
            hasAppId: !!config.knackAppId,
            hasApiKey: !!config.knackApiKey
        });
        this.cache = { books: null, activities: null, completions: null, lastFetch: {} };
        this.cacheExpiry = 5 * 60 * 1000;
    }

    getCurrentUser() {
        if (typeof Knack !== 'undefined' && Knack.getUserAttributes) {
            const user = Knack.getUserAttributes();
            return { id: user.id, email: user.email, name: user.name || user.values?.field_85 || 'User', ...user };
        }
        return null;
    }

    async fetchFromKnack(objectKey, filters = null) {
        const url = `https://eu-api.knack.com/v1/objects/${objectKey}/records`;
        const headers = {
            'X-Knack-Application-Id': this.config.knackAppId,
            'X-Knack-REST-API-Key': this.config.knackApiKey,
            'Content-Type': 'application/json'
        };

        let params = new URLSearchParams();
        if (filters) params.append('filters', JSON.stringify(filters));
        params.append('rows_per_page', '1000');

        const fullUrl = url + '?' + params.toString();
        
        try {
            const response = await fetch(fullUrl, { headers });
            if (!response.ok) throw new Error(`API error: ${response.status}`);
            const data = await response.json();
            return data.records || [];
        } catch (error) {
            console.error('[API] Fetch error:', error);
            throw error;
        }
    }

    async getBooks() {
        try {
            const records = await this.fetchFromKnack('object_56');
            return records.map(r => ({
                id: r.id,
                name: r.field_1429,
                imageUrl: this.extractImageUrl(r.field_1439_raw || r.field_1439)
            }));
        } catch (error) {
            console.error('[API] Failed to fetch books:', error);
            return [];
        }
    }

    async getActivities(bookName = null) {
        try {
            let filters = null;
            if (bookName) {
                filters = { match: 'and', rules: [{ field: 'field_2702', operator: 'is', value: bookName }] };
            }
            const records = await this.fetchFromKnack('object_58', filters);
            return records.map(r => ({
                id: r.id,
                book: r.field_2702,
                activityId: r.field_1446,
                theme: r.field_1461,
                name: r.field_1431,
                group: r.field_1435_raw || r.field_1435,
                content: r.field_1448_raw || r.field_1448
            }));
        } catch (error) {
            console.error('[API] Failed to fetch activities:', error);
            return [];
        }
    }

    async getUserCompletions() {
        const user = this.getCurrentUser();
        if (!user) return [];
        try {
            const filters = { match: 'and', rules: [{ field: 'field_1437', operator: 'is', value: user.id }] };
            const records = await this.fetchFromKnack('object_59', filters);
            return records.map(r => {
                let completed = {};
                try {
                    const raw = r.field_1432_raw || r.field_1432;
                    completed = typeof raw === 'string' ? JSON.parse(raw) : raw;
                } catch (e) {}
                return { id: r.id, activitiesCompleted: completed };
            });
        } catch (error) {
            return [];
        }
    }

    async completeActivity(activityId, bookName) {
        const user = this.getCurrentUser();
        if (!user) throw new Error('Not logged in');
        
        const completions = await this.getUserCompletions();
        let json = completions.length > 0 ? completions[0].activitiesCompleted : {};
        
        if (!json[bookName]) json[bookName] = [];
        if (!json[bookName].includes(activityId)) json[bookName].push(activityId);
        
        const data = {
            field_1437: [user.id],
            field_1432: JSON.stringify(json),
            field_1449: user.name,
            field_2295: new Date().toISOString()
        };
        
        const url = completions.length > 0 
            ? `https://eu-api.knack.com/v1/objects/object_59/records/${completions[0].id}`
            : `https://eu-api.knack.com/v1/objects/object_59/records`;
            
        const method = completions.length > 0 ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method,
            headers: {
                'X-Knack-Application-Id': this.config.knackAppId,
                'X-Knack-REST-API-Key': this.config.knackApiKey,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        if (!response.ok) throw new Error('Failed to save completion');
        this.cache.completions = null;
        return await response.json();
    }

    async getDiscussions(activityId) {
        try {
            const filters = { match: 'and', rules: [{ field: 'field_1444', operator: 'is', value: activityId }] };
            const records = await this.fetchFromKnack('object_60', filters);
            return records.map(r => ({
                id: r.id,
                author: r.field_1445_raw?.[0]?.identifier || 'Unknown',
                comment: r.field_1433,
                date: r.field_1447_raw?.date_formatted || r.field_1447
            }));
        } catch (error) {
            return [];
        }
    }

    async addDiscussion(activityId, comment) {
        const user = this.getCurrentUser();
        if (!user) throw new Error('Not logged in');
        
        const data = {
            field_1444: [activityId],
            field_1445: [user.id],
            field_1433: comment,
            field_1447: new Date().toISOString()
        };
        
        const response = await fetch('https://eu-api.knack.com/v1/objects/object_60/records', {
            method: 'POST',
            headers: {
                'X-Knack-Application-Id': this.config.knackAppId,
                'X-Knack-REST-API-Key': this.config.knackApiKey,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        if (!response.ok) throw new Error('Failed to add comment');
        return await response.json();
    }

    async calculateProgress(bookName) {
        const [activities, completions] = await Promise.all([
            this.getActivities(bookName),
            this.getUserCompletions()
        ]);
        
        if (completions.length === 0) {
            return { total: activities.length, completed: 0, percentage: 0, completedIds: [] };
        }
        
        const ids = completions[0].activitiesCompleted[bookName] || [];
        return {
            total: activities.length,
            completed: ids.length,
            percentage: Math.round((ids.length / activities.length) * 100),
            completedIds: ids
        };
    }

    extractImageUrl(html) {
        if (!html) return '';
        if (typeof html === 'string' && html.startsWith('http')) return html;
        if (typeof html === 'string' && html.includes('<img')) {
            const match = html.match(/src="([^"]+)"/);
            return match ? match[1] : '';
        }
        return html?.url || '';
    }
}

window.CurriculumAPI = CurriculumAPI;

// ===== UTILITIES =====
const Utils = {
    themeColors: {
        Vision: '#FFA500', Effort: '#a4c2f4', Systems: '#aad950',
        Practice: '#a986ff', Attitude: '#ff769c',
        VISION: '#FFA500', EFFORT: '#a4c2f4', SYSTEMS: '#aad950',
        PRACTICE: '#a986ff', ATTITUDE: '#ff769c'
    },
    
    getThemeColor(theme) {
        if (!theme) return '#079baa';
        return this.themeColors[theme.trim()] || this.themeColors[theme.trim().toUpperCase()] || '#079baa';
    },
    
    extractIframe(html) {
        if (!html) return null;
        if (html.trim().startsWith('<iframe')) return html;
        const match = html.match(/<iframe[^>]*>[\s\S]*?<\/iframe>/i);
        return match ? match[0] : null;
    },
    
    extractPdfLink(html) {
        if (!html) return null;
        const match = html.match(/href="([^"]*\.pdf[^"]*)"/i);
        return match ? match[1] : null;
    },
    
    sortMonths(months) {
        const order = ['September', 'October', 'November', 'December',
                      'January', 'Febuary', 'February', 'March', 'April', 'May', 'June', 'July'];
        return months.sort((a, b) => {
            const iA = order.indexOf(a);
            const iB = order.indexOf(b);
            if (iA === -1) return 1;
            if (iB === -1) return -1;
            return iA - iB;
        });
    },
    
    showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'success-toast';
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.classList.add('show'), 10);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
};

console.log('[Curriculum SPA v2] Core functions loaded');

