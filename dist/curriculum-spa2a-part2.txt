/**
 * VESPA Curriculum SPA v2.0 - Part 2: Main Application
 * Complete single-page curriculum system
 */

// ===== STATE MANAGEMENT =====
const AppState = {
    currentPage: 'books', // books | browser | viewer
    currentBook: null,
    currentActivity: null,
    activities: [],
    completedIds: [],
    recentlyViewed: JSON.parse(localStorage.getItem('recentlyViewedActivities') || '[]'),
    
    setPage(page) {
        this.currentPage = page;
        this.render();
    },
    
    selectBook(bookName) {
        this.currentBook = bookName;
        this.currentPage = 'browser';
        this.render();
    },
    
    selectActivity(activityId) {
        const activity = this.activities.find(a => a.id === activityId);
        if (activity) {
            this.currentActivity = activity;
            this.currentPage = 'viewer';
            this.addToRecentlyViewed(activity);
            this.render();
        }
    },
    
    addToRecentlyViewed(activity) {
        this.recentlyViewed = this.recentlyViewed.filter(a => a.id !== activity.id);
        this.recentlyViewed.unshift({ id: activity.id, name: activity.name, book: activity.book });
        this.recentlyViewed = this.recentlyViewed.slice(0, 10);
        localStorage.setItem('recentlyViewedActivities', JSON.stringify(this.recentlyViewed));
    },
    
    render() {
        document.querySelectorAll('.curriculum-page').forEach(p => p.classList.remove('active'));
        const activePage = document.querySelector(`.curriculum-page[data-page="${this.currentPage}"]`);
        if (activePage) activePage.classList.add('active');
    }
};

// ===== PAGE 1: BOOK SELECTION =====
const Page1 = {
    async render(api) {
        const container = document.getElementById('page-books');
        if (!container) return;
        
        container.innerHTML = '<div class="loading-state"><div class="spinner"></div><p>Loading books...</p></div>';
        
        try {
            const books = await api.getBooks();
            const progressData = await Promise.all(books.map(b => api.calculateProgress(b.name)));
            
            container.innerHTML = `
                <div class="books-page-header">
                    <h1>Choose Your Curriculum</h1>
                    <p>Select a book to explore 120+ teaching activities</p>
                </div>
                <div id="books-grid"></div>
            `;
            
            const grid = container.querySelector('#books-grid');
            books.forEach((book, i) => {
                const progress = progressData[i];
                const card = document.createElement('div');
                card.className = 'book-card';
                card.innerHTML = `
                    <img src="${book.imageUrl}" alt="${book.name}">
                    <h2>${book.name}</h2>
                    <div class="book-progress">
                        <div class="progress-percentage">${progress.percentage}%</div>
                        <div class="progress-label">Complete</div>
                        <div class="progress-bar-container">
                            <div class="progress-bar-fill" style="width: ${progress.percentage}%"></div>
                        </div>
                        <div class="progress-stats">${progress.completed} of ${progress.total} activities</div>
                    </div>
                    <button class="btn-explore">Explore Activities</button>
                `;
                
                card.onclick = () => {
                    AppState.selectBook(book.name);
                    Page2.load(api, book.name);
                };
                
                grid.appendChild(card);
            });
        } catch (error) {
            container.innerHTML = '<div class="error-state"><h3>Failed to load books</h3><p>' + error.message + '</p></div>';
        }
    }
};

// ===== PAGE 2: ACTIVITY BROWSER =====
const Page2 = {
    filterState: { search: '', theme: 'All', month: 'All', problem: '' },
    
    async load(api, bookName) {
        const container = document.getElementById('page-browser');
        if (!container) return;
        
        container.innerHTML = '<div class="loading-state"><div class="spinner"></div><p>Loading activities...</p></div>';
        
        try {
            const [activities, completions] = await Promise.all([
                api.getActivities(bookName),
                api.getUserCompletions()
            ]);
            
            AppState.activities = activities;
            AppState.completedIds = completions.length > 0 ? (completions[0].activitiesCompleted[bookName] || []) : [];
            
            this.render();
        } catch (error) {
            container.innerHTML = '<div class="error-state"><h3>Failed to load activities</h3></div>';
        }
    },
    
    render() {
        const container = document.getElementById('page-browser');
        const activities = this.getFilteredActivities();
        const months = [...new Set(activities.map(a => this.extractMonth(a.group)))].filter(Boolean);
        const themes = ['All', 'Vision', 'Effort', 'Systems', 'Practice', 'Attitude'];
        
        container.innerHTML = `
            <div class="browser-header">
                <div class="browser-title">
                    <h1>${AppState.currentBook}</h1>
                    <p class="browser-subtitle">${activities.length} activities</p>
                </div>
                <button class="btn-back" onclick="AppState.setPage('books')">‚Üê Back to Books</button>
            </div>
            
            <div class="search-section">
                <div class="search-row">
                    <input type="text" class="search-input" placeholder="üîç Search activities..." 
                           value="${this.filterState.search}" onkeyup="Page2.updateFilter('search', this.value)">
                    
                    <select class="filter-select" onchange="Page2.updateFilter('theme', this.value)">
                        ${themes.map(t => `<option value="${t}" ${this.filterState.theme === t ? 'selected' : ''}>${t}</option>`).join('')}
                    </select>
                    
                    <select class="filter-select" onchange="Page2.updateFilter('month', this.value)">
                        <option value="All">All Months</option>
                        ${Utils.sortMonths(months).map(m => `<option value="${m}" ${this.filterState.month === m ? 'selected' : ''}>${m}</option>`).join('')}
                    </select>
                </div>
                
                <div class="problem-search">
                    <label>üéØ Or search by student problem:</label>
                    <select class="problem-select" onchange="Page2.searchByProblem(this.value)">
                        <option value="">Select a common student challenge...</option>
                        ${this.getProblemOptions()}
                    </select>
                </div>
                
                <div class="quick-stats">
                    <div class="stat-card"><div class="stat-number">${activities.length}</div><div class="stat-label">Total</div></div>
                    <div class="stat-card" style="background: linear-gradient(135deg, #4caf50, #66bb6a)">
                        <div class="stat-number">${AppState.completedIds.length}</div><div class="stat-label">Completed</div>
                    </div>
                    <div class="stat-card" style="background: linear-gradient(135deg, #ff9800, #ffa726)">
                        <div class="stat-number">${activities.length - AppState.completedIds.length}</div><div class="stat-label">Remaining</div>
                    </div>
                </div>
            </div>
            
            <div id="activities-list"></div>
        `;
        
        this.renderActivities(activities);
    },
    
    getProblemOptions() {
        const problems = window.CURRICULUM_STUDENT_PROBLEMS || {};
        let html = '';
        Object.keys(problems).forEach(theme => {
            html += `<optgroup label="${theme}">`;
            problems[theme].forEach((p, i) => {
                html += `<option value="${theme}:${i}">${p.text}</option>`;
            });
            html += '</optgroup>';
        });
        return html;
    },
    
    searchByProblem(value) {
        if (!value) return;
        const [theme, index] = value.split(':');
        const problems = window.CURRICULUM_STUDENT_PROBLEMS || {};
        const problem = problems[theme]?.[parseInt(index)];
        
        if (problem && problem.activities) {
            // Filter to show only recommended activities
            this.filterState.search = problem.activities.join('|');
            this.render();
            Utils.showToast(`Showing activities for: ${problem.text}`);
        }
    },
    
    updateFilter(key, value) {
        this.filterState[key] = value;
        this.render();
    },
    
    getFilteredActivities() {
        let filtered = AppState.activities;
        
        if (this.filterState.search) {
            const query = this.filterState.search.toLowerCase();
            filtered = filtered.filter(a => 
                a.name.toLowerCase().includes(query) ||
                a.theme.toLowerCase().includes(query) ||
                a.activityId.toString().includes(query)
            );
        }
        
        if (this.filterState.theme !== 'All') {
            filtered = filtered.filter(a => a.theme.toLowerCase() === this.filterState.theme.toLowerCase());
        }
        
        if (this.filterState.month !== 'All') {
            filtered = filtered.filter(a => this.extractMonth(a.group) === this.filterState.month);
        }
        
        return filtered;
    },
    
    extractMonth(group) {
        const arr = Array.isArray(group) ? group : [group];
        for (const g of arr) {
            const str = typeof g === 'string' ? g : g?.identifier || '';
            if (str) return str.split(' - ')[0] || '';
        }
        return '';
    },
    
    renderActivities(activities) {
        const container = document.getElementById('activities-list');
        const grouped = {};
        
        activities.forEach(a => {
            const month = this.extractMonth(a.group) || 'Other';
            if (!grouped[month]) grouped[month] = [];
            grouped[month].push(a);
        });
        
        container.innerHTML = Object.keys(grouped).length === 0 
            ? '<div style="text-align:center; padding: 60px; color: #999;"><h3>No activities found</h3><p>Try adjusting your filters</p></div>'
            : '';
        
        Utils.sortMonths(Object.keys(grouped)).forEach(month => {
            const section = document.createElement('div');
            section.className = 'month-section';
            section.innerHTML = `
                <h2 class="month-header">${month}</h2>
                <div class="activities-grid" id="month-${month.replace(/\s/g, '')}"></div>
            `;
            container.appendChild(section);
            
            const grid = section.querySelector('.activities-grid');
            grouped[month].forEach(activity => {
                const isCompleted = AppState.completedIds.includes(activity.id);
                const card = document.createElement('div');
                card.className = 'activity-card' + (isCompleted ? ' completed' : '');
                card.innerHTML = `
                    <div class="activity-header" style="border-left-color: ${Utils.getThemeColor(activity.theme)}">
                        <span class="theme-badge" style="background: ${Utils.getThemeColor(activity.theme)}">${activity.theme}</span>
                        <span class="activity-id">#${activity.activityId}</span>
                    </div>
                    <div class="activity-body">
                        <h3 class="activity-name">${activity.name}</h3>
                        ${isCompleted ? '<span class="completed-badge">‚úì Completed</span>' : ''}
                    </div>
                    <div class="activity-footer">
                        <button class="btn-view">${isCompleted ? 'View Again' : 'Start Activity'}</button>
                    </div>
                `;
                
                card.onclick = () => {
                    AppState.selectActivity(activity.id);
                    Page3.load(window.curriculumAPI, activity);
                };
                
                grid.appendChild(card);
            });
        });
    }
};

console.log('[Curriculum SPA v2] Pages 1 & 2 loaded');

